#!/bin/sh

# This program is licensed under the GNU GPL version 2 or later.
# (c) Richard "RichiH" Hartmann <richih@debian.org>, 2011-2015
# For details, see LICENSE. To submit patches, you have to agree to
# license your code under the GNU GPL version 2 or later.

# While the following is not legally binding, the author would like to
# explain the choice of GPLv2+ over GPLv3+.
# The author prefers GPLv3+ over GPLv2+ but feels it's better to maintain
# full compatibility's with Git. In case Git ever changes its licensing terms,
# which is admittedly extremely unlikely to the point of being impossible,
# this software will most likely follow suit.

# This should always be the first line of code to facilitate debugging
[ -n "$VCSH_DEBUG" ] && set -vx

. "$(dirname "$0")/vcsh-functions"

# If '.git-HEAD' is appended to the version, you are seeing an unreleased
# version of vcsh; the master branch is supposed to be clean at all times
# so you can most likely just use it nonetheless
VERSION='1.20141026'
SELF=$(basename $0)

# We need to run getops as soon as possible so we catch -d and other
# options that will modify our behaviour.
# Commands are handled at the end of this script.
while getopts "c:dv" flag; do
	if [ x"$1" = x'-d' ] || [ x"$1" = x'--debug' ]; then
		set -vx
		VCSH_DEBUG=1
		echo "debug mode on"
		echo "$SELF $VERSION"
	elif [ x"$1" = x'-v' ]; then
		VCSH_VERBOSE=1
		echo "verbose mode on"
		echo "$SELF $VERSION"
	elif [ x"$1" = x'-c' ]; then
		VCSH_OPTION_CONFIG=$OPTARG
	fi
	shift 1
done


# Read configuration and set defaults if anything's not set
[ -n "$VCSH_DEBUG" ]                  && set -vx
: ${XDG_CONFIG_HOME:="$HOME/.config"}

# Read configuration files if there are any
[ -r "/etc/vcsh/config" ]             && . "/etc/vcsh/config"
[ -r "$XDG_CONFIG_HOME/vcsh/config" ] && . "$XDG_CONFIG_HOME/vcsh/config"
if [ -n "$VCSH_OPTION_CONFIG" ]; then
	# Source $VCSH_OPTION_CONFIG if it can be read and is in $PWD of $PATH
	if [ -r "$VCSH_OPTION_CONFIG" ]; then
		source_all "$VCSH_OPTION_CONFIG"
	else
		fatal "Can not read configuration file '$VCSH_OPTION_CONFIG'" 1
	fi
fi
[ -n "$VCSH_DEBUG" ]                  && set -vx

# Read defaults
: ${VCSH_REPO_D:="$XDG_CONFIG_HOME/vcsh/repo.d"}
: ${VCSH_HOOK_D:="$XDG_CONFIG_HOME/vcsh/hooks-enabled"}
: ${VCSH_OVERLAY_D:="$XDG_CONFIG_HOME/vcsh/overlays-enabled"}
: ${VCSH_BASE:="$HOME"}
: ${VCSH_GITIGNORE:=exact}
: ${VCSH_GITATTRIBUTES:=none}
: ${VCSH_WORKTREE:=absolute}

if [ ! "x$VCSH_GITIGNORE" = 'xexact' ] && [ ! "x$VCSH_GITIGNORE" = 'xnone' ] && [ ! "x$VCSH_GITIGNORE" = 'xrecursive' ]; then
	fatal "'\$VCSH_GITIGNORE' must equal 'exact', 'none', or 'recursive'" 1
fi

if [ ! "x$VCSH_WORKTREE" = 'xabsolute' ] && [ ! "x$VCSH_WORKTREE" = 'xrelative' ]; then
	fatal "'\$VCSH_WORKTREE' must equal 'absolute', or 'relative'" 1
fi

debug $(git version)

VCSH_COMMAND=$(expand_abbrev_cmd "$1"); export VCSH_COMMAND

if [ x"$VCSH_COMMAND" = x'clone' ]; then
	parse_clone_args "$@"
elif [ "$VCSH_COMMAND" = 'version' ]; then
	echo "$SELF $VERSION"
	git version
	exit
elif [ x"$VCSH_COMMAND" = x'which' ]; then
	parse_which_args "$@"
	shift 1
elif [ x"$VCSH_COMMAND" = x'delete' ]           ||
     [ x"$VCSH_COMMAND" = x'enter' ]            ||
     [ x"$VCSH_COMMAND" = x'init' ]             ||
     [ x"$VCSH_COMMAND" = x'list-tracked-by' ]  ||
     [ x"$VCSH_COMMAND" = x'upgrade' ]          ||
     [ x"$VCSH_COMMAND" = x'write-gitignore' ]; then
	parse_repo_args "$@"
elif [ x"$VCSH_COMMAND" = x'rename' ]; then
	parse_rename_args "$@"
elif [ x"$VCSH_COMMAND" = x'run' ]; then
	parse_run_args "$@"
	shift 2
elif [ x"$VCSH_COMMAND" = x'foreach' ]; then
	[ -z "$2" ] && fatal "$VCSH_COMMAND: please specify a command" 1
	shift 1
elif [ x"$VCSH_COMMAND" = x'commit' ] ||
     [ x"$VCSH_COMMAND" = x'list'   ] ||
     [ x"$VCSH_COMMAND" = x'list-tracked' ] ||
     [ x"$VCSH_COMMAND" = x'list-untracked' ] ||
     [ x"$VCSH_COMMAND" = x'pull'   ] ||
     [ x"$VCSH_COMMAND" = x'push'   ]; then
	:
elif [ x"$VCSH_COMMAND" = x'status' ]; then
	parse_status_args "$@"
elif [ -n "$2" ]; then
	VCSH_COMMAND='run'; export VCSH_COMMAND
	parse_implicit_args "$@"
	shift 1
	set -- "git" "$@"
elif [ -n "$VCSH_COMMAND" ]; then
	VCSH_COMMAND='enter'; export VCSH_COMMAND
	parse_implicit_args "$@"
else
	# $1 is empty, or 'help'
	help && exit
fi

# Did we receive a directory instead of a name?
# Mangle the input to fit normal operation.
if echo "$VCSH_REPO_NAME" | grep -q '/'; then
	GIT_DIR=$VCSH_REPO_NAME; export GIT_DIR
	VCSH_REPO_NAME=$(basename "$VCSH_REPO_NAME" .git); export VCSH_REPO_NAME
fi

check_dir "$VCSH_REPO_D"
[ ! "x$VCSH_GITIGNORE" = 'xnone' ] && check_dir "$VCSH_BASE/.gitignore.d"
[ ! "x$VCSH_GITATTRIBUTES" = 'xnone' ] && check_dir "$VCSH_BASE/.gitattributes.d"

verbose "$VCSH_COMMAND begin"
VCSH_COMMAND=$(echo "$VCSH_COMMAND" | sed 's/-/_/g'); export VCSH_COMMAND

# Source repo-specific configuration file
[ -r "$XDG_CONFIG_HOME/vcsh/config.d/$VCSH_REPO_NAME" ] && . "$XDG_CONFIG_HOME/vcsh/config.d/$VCSH_REPO_NAME"

# source overlay functions
for overlay in "$VCSH_OVERLAY_D/$VCSH_COMMAND"* "$VCSH_OVERLAY_D/$VCSH_REPO_NAME.$VCSH_COMMAND"*; do
	[ -r "$overlay" ] || continue
	info "sourcing '$overlay'"
	. "$overlay"
done

hook pre-command
$VCSH_COMMAND "$@"
hook post-command
verbose "$VCSH_COMMAND end, exiting"
exit $VCSH_COMMAND_RETURN_CODE
