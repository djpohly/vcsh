#!/bin/sh

# This program is licensed under the GNU GPL version 2 or later.
# (c) Richard "RichiH" Hartmann <richih@debian.org>, 2011-2015
# For details, see LICENSE. To submit patches, you have to agree to
# license your code under the GNU GPL version 2 or later.

# While the following is not legally binding, the author would like to
# explain the choice of GPLv2+ over GPLv3+.
# The author prefers GPLv3+ over GPLv2+ but feels it's better to maintain
# full compatibility's with Git. In case Git ever changes its licensing terms,
# which is admittedly extremely unlikely to the point of being impossible,
# this software will most likely follow suit.

# This should always be the first line of code to facilitate debugging
[ -n "$VCSH_DEBUG" ] && set -vx

. "$(dirname "$0")/vcsh-functions"

# If '.git-HEAD' is appended to the version, you are seeing an unreleased
# version of vcsh; the master branch is supposed to be clean at all times
# so you can most likely just use it nonetheless
VERSION='1.20141026'
SELF=$(basename $0)

# We need to run getops as soon as possible so we catch -d and other
# options that will modify our behaviour.
# Commands are handled at the end of this script.
while getopts "c:dv" flag; do
	if [ x"$1" = x'-d' ] || [ x"$1" = x'--debug' ]; then
		set -vx
		VCSH_DEBUG=1
		echo "debug mode on"
		echo "$SELF $VERSION"
	elif [ x"$1" = x'-v' ]; then
		VCSH_VERBOSE=1
		echo "verbose mode on"
		echo "$SELF $VERSION"
	elif [ x"$1" = x'-c' ]; then
		VCSH_OPTION_CONFIG=$OPTARG
	fi
	shift 1
done
[ -n "$VCSH_DEBUG" ]                  && set -vx

# Read configuration and set defaults if anything's not set
: ${XDG_CONFIG_HOME:="$HOME/.config"}
source_configs
[ -n "$VCSH_DEBUG" ]                  && set -vx

set_defaults
validate_env_options

debug $(git version)

VCSH_COMMAND=$(normalize_cmd "$1")

# Unrecognized command = implicit enter or run
if [ -z "$VCSH_COMMAND" ]; then
	if [ -z "$2" ]; then
		VCSH_COMMAND=enter
		set -- enter "$@"
	else
		VCSH_COMMAND=run
		repo=$1
		shift 1
		set -- run "$repo" git "$@"
	fi
fi

# First handle commands which exit immediately
if [ x"$VCSH_COMMAND" = x'version' ]; then
	echo "$SELF $VERSION"
	git version
	exit
fi
if [ x"$VCSH_COMMAND" = x'help' ]; then
	# $1 is empty, or 'help'
	help && exit
fi

check_needed_dirs

if [ x"$VCSH_COMMAND" = x'clone' ]; then
	parse_clone_args "$@"
	run_vcsh_cmd clone "$@"
elif [ x"$VCSH_COMMAND" = x'which' ]; then
	shift 1
	[ -z "$1" ] && fatal "$VCSH_COMMAND: please specify a filename" 1
	[ -n "$2" ] && fatal "$VCSH_COMMAND: too many parameters" 1
	run_vcsh_cmd which "$@"
elif [ x"$VCSH_COMMAND" = x'delete' ]           ||
     [ x"$VCSH_COMMAND" = x'enter' ]            ||
     [ x"$VCSH_COMMAND" = x'init' ]             ||
     [ x"$VCSH_COMMAND" = x'list-tracked-by' ]  ||
     [ x"$VCSH_COMMAND" = x'upgrade' ]          ||
     [ x"$VCSH_COMMAND" = x'write-gitignore' ]; then
	shift 1
	[ -z "$1" ] && fatal "$VCSH_COMMAND: please specify repository to work on" 1
	enter_repo "$1"
	run_vcsh_cmd "$VCSH_COMMAND" "$@"
elif [ x"$VCSH_COMMAND" = x'rename' ]; then
	shift 1
	[ -z "$1" ] && fatal "$VCSH_COMMAND: please specify repository to work on" 1
	enter_repo "$1"
	shift 1
	[ -z "$1" ] && fatal "$VCSH_COMMAND: please specify a target name" 1
	VCSH_REPO_NAME_NEW=$1; export VCSH_REPO_NAME_NEW;
	GIT_DIR_NEW=$VCSH_REPO_D/$VCSH_REPO_NAME_NEW.git; export GIT_DIR_NEW
	run_vcsh_cmd rename "$@"
elif [ x"$VCSH_COMMAND" = x'run' ]; then
	shift 1
	[ -z "$1" ] && fatal "$VCSH_COMMAND: please specify repository to work on" 1
	enter_repo "$1"
	shift 1
	[ -z "$1" ] && fatal "$VCSH_COMMAND: please specify a command" 1
	run_vcsh_cmd run "$@"
elif [ x"$VCSH_COMMAND" = x'foreach' ]; then
	shift 1
	[ -z "$1" ] && fatal "foreach: please specify a command" 1
	run_vcsh_cmd foreach "$@"
elif [ x"$VCSH_COMMAND" = x'commit' ] ||
     [ x"$VCSH_COMMAND" = x'list'   ] ||
     [ x"$VCSH_COMMAND" = x'pull'   ] ||
     [ x"$VCSH_COMMAND" = x'push'   ] ||
     [ x"$VCSH_COMMAND" = x'list-tracked' ] ||
     [ x"$VCSH_COMMAND" = x'list-untracked' ]; then
	shift 1
	run_vcsh_cmd "$VCSH_COMMAND" "$@"
elif [ x"$VCSH_COMMAND" = x'status' ]; then
	shift 1
	if [ x"$1" = x'--terse' ]; then
		VCSH_STATUS_TERSE=1; export VCSH_STATUS_TERSE
		shift
	fi
	enter_repo "$1"
	run_vcsh_cmd status "$@"
fi
