#!/bin/sh

fatal() {
	echo "$SELF: fatal: $1" >&2
	[ -z $2 ] && exit 1
	exit $2
}

source_all() {
	# Source file even if it's in $PWD and does not have any slashes in it
	case $1 in
		*/*) . "$1";;
		*)   . "$PWD/$1";;
	esac;
}

help() {
	echo "usage: $SELF <options> <command>

   options:
   -c <file>            Source file
   -d                   Enable debug mode
   -v                   Enable verbose mode

   commands:
   clone [-b <branch>] \\
         <remote> \\
         [<repo>]       Clone from an existing repository
   commit               Commit in all repositories
   delete <repo>        Delete an existing repository
   enter <repo>         Enter repository; spawn new instance of \$SHELL
   foreach [<-g>]
     <git command>      Execute a command for every repository
   help                 Display this help text
   init <repo>          Initialize a new repository
   list                 List all repositories
   list-tracked \\
        [<repo>]        List all files tracked all or one repositories
   list-untracked \\
        [<-a>] [<-r>]
        [<repo>]        List all files not tracked by all or one repositories
   pull                 Pull from all vcsh remotes
   push                 Push to vcsh remotes
   rename <repo> \\
          <newname>     Rename repository
   run <repo> \\
       <command>        Use this repository
   status \\
     [--terse] [<repo>] Show statuses of all/one vcsh repositories
   upgrade <repo>       Upgrade repository to currently recommended settings
   version              Print version information
   which <substring>    Find substring in name of any tracked file
   write-gitignore \\
   <repo>               Write .gitignore.d/<repo> via git ls-files

   <repo> <git command> Shortcut to run git commands directly
   <repo>               Shortcut to enter repository" >&2
}

debug() {
	[ -n "$VCSH_DEBUG" ] && echo "$SELF: debug: $@"
}

verbose() {
	if [ -n "$VCSH_DEBUG" ] || [ -n "$VCSH_VERBOSE" ]; then echo "$SELF: verbose: $@"; fi
}

error() {
	echo "$SELF: error: $1" >&2
}

info() {
	echo "$SELF: info: $1"
}

clone() {
	hook pre-clone
	init
	git remote add origin "$GIT_REMOTE"
	git checkout -b "$VCSH_BRANCH" || return $?
	git config branch."$VCSH_BRANCH".remote origin
	git config branch."$VCSH_BRANCH".merge  refs/heads/"$VCSH_BRANCH"
	if [ $(git ls-remote origin "$VCSH_BRANCH" 2> /dev/null | wc -l ) -lt 1 ]; then
		info "remote is empty, not merging anything.
  You should add files to your new repository."
		exit
	fi
	GIT_VERSION_MAJOR=$(git --version | sed -n 's/.* \([0-9]\)\..*/\1/p' )
	if [ 1 -lt "$GIT_VERSION_MAJOR" ];then
		git fetch origin "$VCSH_BRANCH"
	else
		git fetch origin
	fi
	hook pre-merge
	git ls-tree -r --name-only origin/"$VCSH_BRANCH" | (while read object; do
		[ -e "$object" ] &&
			error "'$object' exists." &&
			VCSH_CONFLICT=1
	done
	[ x"$VCSH_CONFLICT" = x'1' ]) &&
		fatal "will stop after fetching and not try to merge!
  Once this situation has been resolved, run 'vcsh $VCSH_REPO_NAME pull' to finish cloning." 17
	git -c merge.ff=true merge origin/"$VCSH_BRANCH"
	hook post-merge
	hook post-clone
	retire
	hook post-clone-retired
}

commit() {
	hook pre-commit
	for VCSH_REPO_NAME in $(list); do
		echo "$VCSH_REPO_NAME: "
		GIT_DIR=$VCSH_REPO_D/$VCSH_REPO_NAME.git; export GIT_DIR
		use
		git commit --untracked-files=no --quiet $@
		VCSH_COMMAND_RETURN_CODE=$?
		echo
	done
	hook post-commit
}

delete() {
	cd "$VCSH_BASE" || fatal "could not enter '$VCSH_BASE'" 11
	use
	info "This operation WILL DESTROY DATA!"
	files=$(git ls-files)
	echo "These files will be deleted:

$files

AGAIN, THIS WILL DELETE YOUR DATA!
To continue, type 'Yes, do as I say'"
	read answer
	[ "x$answer" = 'xYes, do as I say' ] || exit 16
	for file in $files; do
		rm -f $file || info "could not delete '$file', continuing with deletion"
	done
	rm -rf "$GIT_DIR" || error "could not delete '$GIT_DIR'"
}

enter() {
	hook pre-enter
	use
	$SHELL
	hook post-enter
}

foreach() {
	hook pre-foreach

	# We default to prefixing `git` to all commands passed to foreach, but
	# allow running in general context with -g
	command_prefix=git
	while getopts "g" flag; do
		if [ x"$1" = x'-g' ]; then
			unset command_prefix
		fi
		shift 1
	done
	for VCSH_REPO_NAME in $(list); do
		echo "$VCSH_REPO_NAME:"
		GIT_DIR=$VCSH_REPO_D/$VCSH_REPO_NAME.git; export GIT_DIR
		use
		$command_prefix "$@"
	done
	hook post-foreach
}

git_dir_exists() {
	[ -d "$GIT_DIR" ] || fatal "no repository found for '$VCSH_REPO_NAME'" 12
}

hook() {
	for hook in "$VCSH_HOOK_D/$1"* "$VCSH_HOOK_D/$VCSH_REPO_NAME.$1"*; do
		[ -x "$hook" ] || continue
		verbose "executing '$hook'"
		"$hook"
	done
}

init() {
	hook pre-init
	[ ! -e "$GIT_DIR" ] || fatal "'$GIT_DIR' exists" 10
	mkdir -p "$VCSH_BASE" || fatal "could not create '$VCSH_BASE'" 50
	cd "$VCSH_BASE" || fatal "could not enter '$VCSH_BASE'" 11
	git init --shared=0600
	upgrade
	hook post-init
}

list() {
	for repo in "$VCSH_REPO_D"/*.git; do
		[ -d "$repo" ] && [ -r "$repo" ] && echo "$(basename "$repo" .git)"
	done
}

get_files() {
	GIT_DIR=$VCSH_REPO_D/$VCSH_REPO_NAME.git; export GIT_DIR
	git ls-files
}

list_tracked() {
	VCSH_REPO_NAME=$2; export VCSH_REPO_NAME
	if [ -n "$VCSH_REPO_NAME" ]; then
		get_files | list_tracked_helper
	else
		for VCSH_REPO_NAME in $(list); do
			get_files
		done | list_tracked_helper
	fi
}

list_tracked_helper() {
	sed "s,^,$(printf '%s\n' "$VCSH_BASE/" | sed 's/[,\&]/\\&/g')," | sort -u
}

list_tracked_by() {
	list_tracked '' $2
}

list_untracked() {
	command -v 'comm' >/dev/null 2>&1 || fatal "Could not find 'comm'"

	temp_file_others=$(mktemp "${TMPDIR:-/tmp}/tmp.XXXXXXXXXX") || fatal 'Could not create temp file'
	temp_file_untracked=$(mktemp "${TMPDIR:-/tmp}/tmp.XXXXXXXXXX") || fatal 'Could not create temp file'
	temp_file_untracked_copy=$(mktemp "${TMPDIR:-/tmp}/tmp.XXXXXXXXXX") || fatal 'Could not create temp file'

	# Hack in support for `vcsh list-untracked -r`...
	exclude_standard_opt='--exclude-standard'
	directory_opt="--directory"
	shift 1
	while getopts "ar" flag; do
		if [ x"$1" = x'-a' ]; then
			unset exclude_standard_opt
		elif [ x"$1" = x'-r' ]; then
			unset directory_opt
		fi
		shift 1
	done
	# ...and parse for a potential parameter afterwards. As we shifted things out of $* in during getops, we need to look at $1
	VCSH_REPO_NAME=$1; export VCSH_REPO_NAME

	if [ -n "$VCSH_REPO_NAME" ]; then
		list_untracked_helper $VCSH_REPO_NAME
	else
		for VCSH_REPO_NAME in $(list); do
			list_untracked_helper $VCSH_REPO_NAME
		done
	fi
	cat $temp_file_untracked

	unset directory_opt directory_component
	rm -f $temp_file_others $temp_file_untracked $temp_file_untracked_copy || fatal 'Could not delete temp files'
}

list_untracked_helper() {
	export GIT_DIR="$VCSH_REPO_D/$VCSH_REPO_NAME.git"
	git ls-files --others $exclude_standard_opt "$directory_opt" | (
		while read line; do
			echo "$line"
			directory_component=${line%%/*}
			[ -d "$directory_component" ] && printf '%s/\n' "$directory_component"
		done
		) | sort -u > $temp_file_others
	if [ -z "$ran_once" ]; then
		ran_once=1
		cp $temp_file_others $temp_file_untracked || fatal 'Could not copy temp file'
	fi
	cp $temp_file_untracked $temp_file_untracked_copy || fatal 'Could not copy temp file'
	comm -12 $temp_file_others $temp_file_untracked_copy > $temp_file_untracked
}

pull() {
	hook pre-pull
	for VCSH_REPO_NAME in $(list); do
		printf '%s: ' "$VCSH_REPO_NAME"
		GIT_DIR=$VCSH_REPO_D/$VCSH_REPO_NAME.git; export GIT_DIR
		use
		git pull
		VCSH_COMMAND_RETURN_CODE=$?
		echo
	done
	hook post-pull
}

push() {
	hook pre-push
	for VCSH_REPO_NAME in $(list); do
		printf '%s: ' "$VCSH_REPO_NAME"
		GIT_DIR=$VCSH_REPO_D/$VCSH_REPO_NAME.git; export GIT_DIR
		use
		git push
		VCSH_COMMAND_RETURN_CODE=$?
		echo
	done
	hook post-push
}

retire() {
	unset VCSH_DIRECTORY
}

rename() {
	git_dir_exists
	[ -d "$GIT_DIR_NEW" ] && fatal "'$GIT_DIR_NEW' exists" 54
	mv -f "$GIT_DIR" "$GIT_DIR_NEW" || fatal "Could not mv '$GIT_DIR' '$GIT_DIR_NEW'" 52

	# Now that the repository has been renamed, we need to fix up its configuration
	# Overwrite old name..
	GIT_DIR=$GIT_DIR_NEW
	VCSH_REPO_NAME=$VCSH_REPO_NAME_NEW
	# ..and clobber all old configuration
	upgrade
}

run() {
	hook pre-run
	use
	"$@"
	VCSH_COMMAND_RETURN_CODE=$?
	hook post-run
}

status() {
	if [ -t 1 ]; then
		COLORING="-c color.status=always"
	fi
	if [ -n "$VCSH_REPO_NAME" ]; then
		status_helper $VCSH_REPO_NAME
	else
		for VCSH_REPO_NAME in $(list); do
			STATUS=$(status_helper $VCSH_REPO_NAME "$COLORING")
			[ -n "$STATUS" -o -z "$VCSH_STATUS_TERSE" ] && echo "$VCSH_REPO_NAME:"
			[ -n "$STATUS" ]            && echo "$STATUS"
			[ -z "$VCSH_STATUS_TERSE" ] && echo
		done
	fi
}

status_helper() {
	GIT_DIR=$VCSH_REPO_D/$1.git; export GIT_DIR
	VCSH_GIT_OPTIONS=$2
	use
	remote_tracking_branch=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2> /dev/null) && {
		commits_behind=$(git log ..${remote_tracking_branch} --oneline | wc -l)
		commits_ahead=$(git log ${remote_tracking_branch}.. --oneline | wc -l)
		[ ${commits_behind} -ne 0 ] && echo "Behind $remote_tracking_branch by $commits_behind commits"
		[ ${commits_ahead} -ne 0 ] && echo "Ahead of $remote_tracking_branch by $commits_ahead commits"
	}
	git ${VCSH_GIT_OPTIONS} status --short --untracked-files='no'
	VCSH_COMMAND_RETURN_CODE=$?
}

upgrade() {
	hook pre-upgrade
	# fake-bare repositories are not bare, actually. Set this to false
	# because otherwise Git complains "fatal: core.bare and core.worktree
	# do not make sense"
	git config core.bare false
	# core.worktree may be absolute or relative to $GIT_DIR, depending on
	# user preference
	if [ ! "x$VCSH_WORKTREE" = 'xabsolute' ]; then
		git config core.worktree "$(cd "$GIT_DIR" && GIT_WORK_TREE=$VCSH_BASE git rev-parse --show-cdup)"
	elif [ ! "x$VCSH_WORKTREE" = 'xrelative' ]; then
		git config core.worktree "$VCSH_BASE"
	fi
	[ ! "x$VCSH_GITIGNORE" = 'xnone' ] && git config core.excludesfile ".gitignore.d/$VCSH_REPO_NAME"
	[ ! "x$VCSH_GITATTRIBUTES" = 'xnone' ] && git config core.attributesfile ".gitattributes.d/$VCSH_REPO_NAME"
	git config vcsh.vcsh 'true'
	use
	[ -e "$VCSH_BASE/.gitignore.d/$VCSH_REPO_NAME" ] && git add -f "$VCSH_BASE/.gitignore.d/$VCSH_REPO_NAME"
	[ -e "$VCSH_BASE/.gitattributes.d/$VCSH_REPO_NAME" ] && git add -f "$VCSH_BASE/.gitattributes.d/$VCSH_REPO_NAME"
	hook post-upgrade
}

use() {
	git_dir_exists
	VCSH_DIRECTORY=$VCSH_REPO_NAME; export VCSH_DIRECTORY
}

which() {
	output=$(for VCSH_REPO_NAME in $(list); do
		get_files | grep -- "$VCSH_COMMAND_PARAMETER" | sed "s/^/$VCSH_REPO_NAME: /"
	done | sort -u)
	if [ -z "$output" ]; then
		fatal "'$VCSH_COMMAND_PARAMETER' does not exist" 1
	else
		echo "$output"
	fi
}

write_gitignore() {
	# Don't do anything if the user does not want to write gitignore
	if [ "x$VCSH_GITIGNORE" = 'xnone' ]; then
		info "Not writing gitignore as '\$VCSH_GITIGNORE' is set to 'none'"
		exit
	fi

	use
	cd "$VCSH_BASE" || fatal "could not enter '$VCSH_BASE'" 11
	local GIT_VERSION="$(git --version)"
	local GIT_VERSION_MAJOR=$(echo $GIT_VERSION | sed -n 's/.* \([0-9]\)\..*/\1/p')
	local GIT_VERSION_MINOR=$(echo $GIT_VERSION | sed -n 's/.* \([0-9]\)\.\([0-9]\)\..*/\2/p')
	OLDIFS=$IFS
	IFS=$(printf '\n\t')
	gitignores=$(for file in $(git ls-files); do
		if [ $GIT_VERSION_MAJOR -ge 2 -a $GIT_VERSION_MINOR -ge 7 ]; then
			echo "$file";
		else
			while true; do
				echo "$file"; new=${file%/*}
				[ x"$file" = x"$new" ] && break
				file=$new
			done;
		fi
	done | sort -u)

	# Contrary to GNU mktemp, mktemp on BSD/OSX requires a template for temp files
	# Using a template makes GNU mktemp default to $PWD and not #TMPDIR for tempfile location
	# To make every OS happy, set full path explicitly
	tempfile=$(mktemp "${TMPDIR:-/tmp}/tmp.XXXXXXXXXX") || fatal "could not create tempfile: '${tempfile}'" 51

	echo '*' > "$tempfile" || fatal "could not write to '$tempfile'" 57
	for gitignore in $gitignores; do
		echo "$gitignore" | sed 's@^@!/@' >> "$tempfile" || fatal "could not write to '$tempfile'" 57
		if [ "x$VCSH_GITIGNORE" = 'xrecursive' ] && [ -d "$gitignore" ]; then
			{ echo "$gitignore/*" | sed 's@^@!/@' >> "$tempfile" || fatal "could not write to '$tempfile'" 57; }
		fi
	done
	IFS=$OLDIFS
	if diff -N "$tempfile" "$VCSH_BASE/.gitignore.d/$VCSH_REPO_NAME" > /dev/null; then
		rm -f "$tempfile" || error "could not delete '$tempfile'"
		exit
	fi
	if [ -e "$VCSH_BASE/.gitignore.d/$VCSH_REPO_NAME" ]; then
		info "'$VCSH_BASE/.gitignore.d/$VCSH_REPO_NAME' differs from new data, moving it to '$VCSH_BASE/.gitignore.d/$VCSH_REPO_NAME.bak'"
		mv -f "$VCSH_BASE/.gitignore.d/$VCSH_REPO_NAME" "$VCSH_BASE/.gitignore.d/$VCSH_REPO_NAME.bak" ||
			fatal "could not move '$VCSH_BASE/.gitignore.d/$VCSH_REPO_NAME' to '$VCSH_BASE/.gitignore.d/$VCSH_REPO_NAME.bak'" 53
	fi
	mv -f "$tempfile" "$VCSH_BASE/.gitignore.d/$VCSH_REPO_NAME" ||
		fatal "could not move '$tempfile' to '$VCSH_BASE/.gitignore.d/$VCSH_REPO_NAME'" 53
}

get_full_command() {
	case $1 in
		clon|clo|cl) echo clone;;
		commi|comm|com|co) echo commit;;
		delet|dele|del|de) echo delete;;
		ente|ent|en) echo enter;;
		hel|he) echo help;;
		ini|in) echo init;;
		pul) echo pull;;
		pus) echo push;;
		renam|rena|ren|re) echo rename;;
		ru) echo run;;
		statu|stat|sta|st) echo status;;
		upgrad|upgra|upgr|up) echo upgrade;;
		versio|versi|vers|ver|ve) echo version;;
		which|whi|wh) echo which;;
		write|writ|wri|wr) echo write-gitignore;;
		*) echo "$1";;
	esac
}
